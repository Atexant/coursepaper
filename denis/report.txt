Википедия (Wikipedia) - свободно распространяемая и редактируемая 
интернет-энциклопедия, расположенная по адресу [1]. По сути она 
представляет собой набор взаимосвязанных статей, затрагивающих самые 
разные области человеческого знания. 

Доступность Википедии может оказать значительное влияние на научные
исследования в области Data Mining. (Здесь расширим за счёт
какого-нибудь материала от Валентины) Это вызвано тем, что материал
Википедии лучше структурирован, чем содержимое веб-страниц, которые
часто используются в качестве основы для различных баз знаний. С одной
стороны, для Википедии в подавляющем большинстве случаев справедливо
правило "одна статья --- одно понятие", сдругой стороны, материал
статей содержит множество ссылок, что позволяет анализировать
взаимосвязи между понятиями. 

Для качественного и полноценного использования материала Википедии
необходимо решить ряд проблем технического характера. Часть из них
напрямую связано с колоссальным количеством текста (копия текста 4 
миллионов статей английской Википедии занимает порядка 36Гб), 
для обработки которого требуется применять инструменты, хорошо
подходящие для обработки сверхбольших данных. Должны также быть
реализованы компоненты, обеспечивающие обработку форматов. Кроме того 
необходимо продумать удобный способ хранения страниц, учитывающий 
возможность индексации и полнототекстового поиска. Наконец, есть ряд 
прикладных задач, связанных с обработкой естественного языка, без решения 
которых было бы невозможно получить какой-либо выигрыш в исследованиях.

В настоящей работе предлагается исследование некоторых путей решения
 упомянутых проблем, а также реализация алгоритма оценки
 справедливости некоторого утверждения, сформулированного на
 естественном языке.  Нет необходимости выполнять реализацию всех
 требуемых компонентов самостоятельно. Например, для обработки
 естественного языка использовалась библиотека CoreNLP Стэнфордского
 университета, которая позволяет определять нормальные формы слов
 (лемматизация), а также строить дерево для определения главных и
 зависимых слов в предложении. При этом, к сожалению, невозможно
 обработать при помощи этой библиотеки весь массив текста из
 Википедии, поскольку это потребовало бы нескольких месяцев вычислений
 (тут какие-нибудь цифры), поэтому предлагаемый подход содержит
 сначала фазу предварительного поиска упомянутых в запросе слов для
 отсечения заведомо нерелевантных статей. Эта процедура, в свою
 очередь, также требует некоторого исследования.

Рассмотрим формат хранения материала свободной энциклопедии, как он
опубликован на основном сайте проекта. Текст каждой статьи проходит
кодирование на двух уровнях:

1. Кодирование с использованием специальной разметки Mediawiki,
позволяющей задать заголовки, ссылки и пр.

2. XML-кодирование, задающее разделение статей внутри одного общего
файла с указанием идентификатора статьи, возможного перенаправления и
пр.

XML --- достаточно популярный формат хранения иерархических массивов
данных, широко используемый в сфере Интернет-технологий или в мире
корпоративного ПО. На многих языках программирования доступны
различные библиотеки, выполняющие разбор XML-разметки. В основном они
делятся на две группы: SAX и DOM. (и так далее и про DOM, и про
SAX...)

1. DOM(Document Object Model)[5] - удобный программный интерфейс доступа 
к XML-документу, рассматривающий его как дерево, где каждому элементу 
сопоставляется узел таким образом, что если элемент А вложен в элемент B 
в XML-документе, то в получившемся дереве узлы, соотвествующие этим элементам 
будут связаны отношением “родитель-потомок”.
Основным недостатком этого метода является то, что он подразумевает хранения 
полученного дерева в оперативной памяти, что в случае с файлами такого размера 
как дампы Wikipedia недопустимо.
2. SAX (Simple API for XML)[6] - метод последовательного чтения XML-документа. 
Его суть заключается в том, что обработчик последовательно обрабатывает данные
из XML-файла, и встречая новые элементы разметки сообщает об этом вызвавшему приложению, 
используя клиентские функции обратного вызова[7]. Таким образом приложение-клиент 
SAX-парсера может получить полную информацию о содержимом и структуре документа,
не загружая его целиком в память. Однако и у этого метода есть свои недостатки. 
Например, если нужно получить содержимое элемента, который находится в конце файла,
нужно обработать все предшествующие элементы, что при размерах документа, сравнимых
с размерами дампа википедии, может занять довольно много времени.

Учитывая достоинства SAX-парсеров, позволяющие обрабатывать объемные XML-документы, 
для реализации был выбран именно этот метод.

Дамп базы данных Википедии[3] - это заархивированный XML-файл, размер которого 
в распакованном виде составляет порядка 36Гб. Как видно из XML-метасхемы[4] 
и при поверхностном изучении самого дампа, статьи в нем представлены в виде 
тэгов “page” верхнего уровня. Каждый из них содержит следующие вложенные теги:
a. title - содержит заголовок статьи, уникальный в рамках википедии
b. id - содержит уникальный идентификатор статьи, положительное целое число
с. revision - тег содержит описание последнего изменения статьи (дату, автора), 
а так же непосредственно последнюю версию текста статьи во вложенном тэге "text”. 
Тег “page”, соответсвующий какой-либо, может также содержать внутри себя 
элемент “redirect”, что означает, что статья с таким названием дублирует 
какую-то другую статью, в этом ее тег “text” содержит заголовок дублируемой статьи. 

*Нужны ли примеры содержимого тегов?*
Да, небольшие примеры вполне уместны.

На этапе разработки обработчика дампа Википедии еще не было хорошо известно, 
что делать с полученными данными дальше, поэтому было принято решение 
использовать следующую архитектуру:
1. Объект parser класса WikipediaParser запускает SAX-парсер, который “сообщает” 
ему о встреченных XML-элементах и их содержимом.
2. Предварительно этот объект конфигурируется другим объектом - обработчиком статей,
 реализующий интерфейс WikipediaPageHandler, содержащий метод handle(WikipediaPage).
3. parser при прочтении целиком тега page создает объект WikipediaPage, заполняет 
необходимые поля и передает его обработчику статей.

Таким образом была получена гибкая система обработки дампа, для использования которой 
достаточно реализовать простой интерфейс с обработкой одного объекта-страницы.

Практически сразу было замечено, что нужно как-то решать проблему доступа к произвольному 
участку документа, так как:
a. Это необходимо для параллельной обработки.
b. При исключительной ситуации, если обработчик некорректно завершает свою работу, 
необходимо было начинать обработку всего дампа сначала, что не очень удобно.

Для этого было решено создать обертку стандартного потока InputStream, которая:
1. Обладает возможностью задания сдвига в байтах от начала файла с XML-документом
2. Если заданный сдвиг не указывает на начало тега page, пропустить все байты вплоть 
до начала следующего такого тега
3. Искусственно “обернуть” отдаваемые потоком данные в корневой тег.
Последние два пункта нужны для того, чтобы содержимое получившегося потока соответсвовало формату XML

В результате была реализована возможность обрабатывать файл-дамп с произвольным
сдвигом от его начала, что значительно увеличило удобство использования этой части системы.  

Текст статей Википедии включает в себя кроме всего прочего элементы разметки[8], которые позволяют:
1. Управлять внешним видом блоков текста (размер/тип шрифта, цвет, отступ и т.п.)
2. Создавать разного рода специфичные структуры оформления информации (таблицы, вложенные списки, оглавления)
3. Выделять некоторые части текста, как ссылки на другие статьи

Так как разметка статей содержит в себе важные, информационно-значимые части, 
необходимо было разработать систему, очищающую текст от ее частей, связанных с оформлением,
а также предоставляющую удобный интерфейс доступа к информативным элементам.

В качестве решения этой проблемы было предложено использовать библиотеку 
JWPL (Java Wikipedia Library)[9], которая содержит инструменты по работе с разметкой 
Mediawiki[8] и дает программный доступ к отдельным ее элементам, таким как:
a. Список ссылок на другие статьи, встречающиеся в тексте этой статьи
b. Вложенные списки и оглавления, представленные в виде древообразных структур
c. Таблицы из конкретной статьи и удобный интерфейс для их обработки

В качестве базы данных для хранения страниц изначально была выбрана свободная реляционная 
СУБД MySQL[11], представляющая собой удобный инструмент для решения поставленных 
задач с возможностью индексирования и хорошей масштабируемостью, однако не с самыми
лучшими показателями в плане полнотекстого поиска. В свете последнего недостатка было 
решено хранить и индексировать в MySQL следующую информацию о страницах:
1. Числовой идентификатор
2. Заголовок
3. Если страница является перенаправлением, заголовок и идентификатор  базовой статьи.
4. Сдвиг в байтах от начала дампа-исходника, где расположена данная страница

Далее планируется подробнее изучить более производительные БД, такие
как Lucene[12], MongoDB[13], лучше приспособленные для поиска в
массивах текстов подобного размера.

Литература
1. http://www.wikipedia.org/
2. http://en.wikipedia.org/wiki/Wikipedia:Database_download
3. http://download.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2
4. http://www.mediawiki.org/xml/export-0.5.xsd
5. http://ru.wikipedia.org/wiki/Document_Object_Model
6. http://ru.wikipedia.org/wiki/SAX
7. http://ru.wikipedia.org/wiki/Callback
8. http://en.wikipedia.org/wiki/Help:Wiki_markup
9. http://code.google.com/p/jwpl/
10. http://en.wikipedia.org/wiki/Wikipedia:Size_of_Wikipedia
11. http://www.mysql.com
12. http://lucene.apache.org/core/
13. http://www.mongodb.org/
